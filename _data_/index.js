const fs = require("fs/promises");
const path = require("path");

const cwd = process.cwd();

const sourceFile = path.join(cwd, "_data_", "units.js");
const destFile = path.join(cwd, "src", "units", "index.js");

const [arg, ...rest] = process.argv.slice(2);
if (rest.length) {
  console.error("Too many arguments");
  process.exit(1);
}

if (arg && !["--minify", "-m"].includes(arg)) {
  console.error("Invalid argument");
  process.exit(1);
}

const data = require("./units.js");
const cleanData = data.map((unitGroup) => {
  return {
    ...unitGroup,
    units: unitGroup.units.map((unit) => {
      delete unit.symbols.full;
      delete unit.symbols.plural;
      return unit;
    }),
  };
});

let regex;
let dataString;

if (arg && ["--minify", "-m"].includes(arg)) {
  regex = /"label":"[^"]*"/gm;
  dataString = JSON.stringify(cleanData);
} else {
  regex = /"label": "[^"]*"/gm;
  dataString = JSON.stringify(cleanData, null, 2);
}

dataString.match(regex).forEach((propValuePair) => {
  const [key, value] = propValuePair.split(":");
  dataString = dataString.replace(value, `_(${value})`);
});

dataString = "export const units = " + dataString;
dataString = "/** This file is autogenerated. Don't modify! */\n" + dataString;

fs.writeFile(destFile, dataString, "utf-8")
  .then(() => {
    console.log("Units processed successfully.");
  })
  .catch((error) => {
    console.log("Unit processing failed.");
  });
